import {
	InputLabel,
	MenuItem
} from '@material-ui/core'
import axios from 'axios'
import passwordGenerator from 'generate-password'
import React, { useEffect, useState } from 'react'
import { useHistory } from 'react-router-dom'
import { useRecoilState } from 'recoil'
import styled from 'styled-components'
import { rolesEndpoint, userEndpoint } from '../../../api'
import Controls from '../../../components/Controls'
import { toast } from '../../../components/Toast'
import { roleAtom } from '../../../recoil/atoms'
import {
	Card, ContentContainer, ControlButton,



	RemoveSpaces, StyledCheckbox
} from '../../../styles'
import {
	SMUIFormControl,
	SMUISelect,
	SMUITextField
} from '../../../styles/StyledMaterialUI'
import { encryptObj } from '../../../utils/helperFunctions'

//------------

function UserInput() {
	const history = useHistory()
	const [roles, setRoles] = useRecoilState(roleAtom)
	const [roleId, setRoleId] = useState('')

	const [firstName, setFirstName] = useState('')
	const [lastName, setLastName] = useState('')
	const [userName, setUserName] = useState('')
	const [email, setEmail] = useState('')
	const [password, setPassword] = useState('')
	const [contact, setContact] = useState('')
	const [isAutoGenerated, setIsAutoGenerated] = useState('')

	useEffect(() => {
		axios
			.get(rolesEndpoint, { withCredentials: true })
			.then(({ data }) => setRoles(data))
			.catch((e) => console.log(e))
	}, [])

	const saveUserHandler = async () => {
		const userData = {
			firstName,
			lastName,
			userName,
			password,
			email,
			contact,
			roleId,
		}
		const data = encryptObj(userData)

		try {
			await axios.post(userEndpoint, { data }, { withCredentials: true })
			history.goBack()
			toast.success('New User Added')
		} catch (error) {
			toast.error('New User Added')
		}
	}

	const autoGeneratePassword = (e) => {
		const checked = e.target.checked

		setIsAutoGenerated(checked)
		if (checked) {
			const password = passwordGenerator.generate({
				length: 14,
				numbers: true,
				symbols: true,
				excludeSimilarCharacters: true,
			})
			setPassword(password)
		}
	}
	return (
		<>
			<Controls title='Add User'>
				<ControlButton color='secondary'>Reset</ControlButton>
				<ControlButton
					onClick={saveUserHandler}
					variant='contained'
					color='primary'>
					Save
				</ControlButton>
			</Controls>
			<ContentContainer>
				<Card>
					<SMUIFormControl variant='outlined'>
						<InputLabel id='role'>Role</InputLabel>
						<SMUISelect
							label='Role'
							value={roleId}
							onChange={(e) => setRoleId(e.target.value)}>
							{roles &&
								roles.map((role) => {
									return <MenuItem key={role._id} value={role._id}>{role.name}</MenuItem>
								})}
						</SMUISelect>
					</SMUIFormControl>
					<SMUITextField
						variant='outlined'
						value={email}
						onChange={(e) => setEmail(e.target.value)}
						type='email'
						label='Email'
					/>
					<SMUITextField
						variant='outlined'
						disabled={isAutoGenerated}
						value={password}
						onChange={(e) => setPassword(e.target.value)}
						type='text'
						label='Password'
					/>
					<AutoGeneratorPassContainer>
						<StyledCheckbox
							checked={isAutoGenerated}
							onChange={autoGeneratePassword}
							type='checkbox'
						/>
						<AutoGeneratorLabel>Auto Generated</AutoGeneratorLabel>
					</AutoGeneratorPassContainer>
					<SMUITextField
						variant='outlined'
						value={firstName}
						onChange={(e) => setFirstName(e.target.value)}
						label='First Name'
					/>
					<SMUITextField
						variant='outlined'
						value={lastName}
						onChange={(e) => setLastName(e.target.value)}
						label='Last Name'
					/>
					<SMUITextField
						variant='outlined'
						value={userName}
						onChange={(e) => setUserName(e.target.value)}
						label='Username'
					/>
					<SMUITextField
						variant='outlined'
						value={contact}
						onChange={(e) => setContact(e.target.value)}
						type='number'
						label='Contact No.'
					/>
				</Card>
			</ContentContainer>
		</>
	)
}

export default UserInput

const AutoGeneratorPassContainer = styled.div`
	display: flex;
	justify-content: flex-start;
	align-items: center;
`

const AutoGeneratorLabel = styled.p`
	${RemoveSpaces};
	padding-left: 5px;
	font-size: 0.8em;
	font-weight: 400;
`
